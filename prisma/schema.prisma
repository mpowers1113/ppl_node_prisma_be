generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Muscle {
  abdominals
  hamstrings
  adductors
  quadriceps
  biceps
  shoulders
  chest
  middle_back
  calves
  glutes
  lower_back
  lats
  triceps
  traps
  forearms
  neck
  abductors
}

enum ForceType {
  pull
  push
  static
}

enum LevelType {
  beginner
  intermediate
  expert
}

enum MechanicType {
  compound
  isolation
}

enum EquipmentType {
  body_only
  machine
  other
  foam_roll
  kettlebells
  dumbbell
  cable
  barbell
  bands
  medicine_ball
  exercise_ball
  ez_curl_bar
}

enum CategoryType {
  strength
  stretching
  plyometrics
  strongman
  powerlifting
  cardio
  olympic_weightlifting
}

model Exercise {
  id               String        @id @default(uuid())
  name             String        @unique
  primaryMuscles   ExerciseMuscle[] @relation("PrimaryMuscles")
  secondaryMuscles ExerciseMuscle[] @relation("SecondaryMuscles")
  force            ForceType?
  level            LevelType
  mechanic         MechanicType?
  equipment        EquipmentType?
  category         CategoryType
  instructions     Instruction[]
  description      String?
  tips             Tip[]
  dateCreated      DateTime      @default(now())
  dateUpdated      DateTime      @updatedAt
  ExerciseTags     ExerciseTags[]
  workout          Workout[]   
}

model User {
  id             Int             @id @default(autoincrement())
  username       String
  email          String          @unique
  password       String
  workouts       Workout[]
  favorites      Workout[]       @relation("favorites")
  comments       Comment[]
  following      UserFollowers[] @relation("UserFollowing")
  followers      UserFollowers[] @relation("UserFollowers")
  sentShares     Share[]         @relation("Sender")
  receivedShares Share[]         @relation("Receiver")
}

model Workout {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  exercises Exercise[]
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  favorites User[]        @relation("favorites")
  comments  Comment[]
  shares    Share[]
  tags      WorkoutTags[]
}

model Comment {
  id        Int     @id @default(autoincrement())
  text      String
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  workoutId Int
  workout   Workout @relation(fields: [workoutId], references: [id])
}

model Share {
  id         Int     @id @default(autoincrement())
  senderId   Int
  sender     User    @relation("Sender", fields: [senderId], references: [id])
  receiverId Int
  receiver   User    @relation("Receiver", fields: [receiverId], references: [id])
  workoutId  Int
  workout    Workout @relation(fields: [workoutId], references: [id])
}

model UserFollowers {
  userId     Int
  followerId Int
  following  User @relation("UserFollowing", fields: [userId], references: [id])
  follower   User @relation("UserFollowers", fields: [followerId], references: [id])

  @@id([userId, followerId])
}

model Tag {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  workouts  WorkoutTags[]
  exercises ExerciseTags[]
}

model WorkoutTags {
  workoutId Int
  tagId     Int
  workout   Workout @relation(fields: [workoutId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([workoutId, tagId])
}

model ExerciseTags {
  exerciseId String
  tagId      Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])

  @@id([exerciseId, tagId])
}

model Instruction {
  id         Int      @id @default(autoincrement())
  content    String
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
}

model Tip {
  id         Int      @id @default(autoincrement())
  content    String
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
}

model ExerciseMuscle {
  id                 Int         @id @default(autoincrement())
  muscle             Muscle
  ExercisePrimary    Exercise?   @relation("PrimaryMuscles", fields: [exercisePrimaryId], references: [id])
  exercisePrimaryId  String?
  ExerciseSecondary  Exercise?   @relation("SecondaryMuscles", fields: [exerciseSecondaryId], references: [id])
  exerciseSecondaryId String?
}

